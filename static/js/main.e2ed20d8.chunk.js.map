{"version":3,"sources":["Calculator.js","App.js","registerServiceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","answer","undefined","react_default","a","createElement","className","htmlFor","autoFocus","tabIndex","type","onChange","handleChange","bind","id","placeholder","onClick","submit","classNames","propName","event","input","target","setState","objectSpread","defineProperty","value","e","preventDefault","minutesToAdd","parseInt","calculatedTime","moment","add","format","Component","App","src_Calculator_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yTAuEeA,qBA9Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IACPC,YAAQC,GAJOV,wEAnCV,IAELS,EACEN,KAAKI,MADPE,OAGF,OACEE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACdH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAaC,QAAQ,SAAtC,UACAJ,EAAAC,EAAAC,cAAA,SACIG,WAAS,EACTC,SAAU,EACVC,KAAK,OACLC,SAAUhB,KAAKiB,aAAaC,KAAKlB,KAAM,SACvCW,UAAU,aACVQ,GAAG,QACHC,YAAY,aAGlBZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACIS,GAAG,SACHL,SAAU,EACVC,KAAK,SACLM,QAASrB,KAAKsB,OAAOJ,KAAKlB,MAC1BW,UAAWY,EAAW,MAAO,cAAe,cALhD,cAUDjB,GAAUE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUL,0DAa7BkB,EAAUC,GACrB,IAAMC,EAAQD,EAAME,OAEpB3B,KAAK4B,SAAL9B,OAAA+B,EAAA,EAAA/B,CAAA,GACKE,KAAKI,MADVN,OAAAgC,EAAA,EAAAhC,CAAA,GAEG0B,EAAWE,EAAMK,wCAIfC,GACLA,EAAEC,iBAEF,IAAMC,EAAeC,SAASnC,KAAKI,MAAMC,OACnC+B,EAAiBC,MAASC,IAAIJ,EAAc,WAAWK,OAAO,UAEpEvC,KAAK4B,SAAL9B,OAAA+B,EAAA,EAAA/B,CAAA,GACKE,KAAKI,MADV,CAEEE,OAAQ8B,YA7DWI,cCYVC,0LAXX,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBAEFH,EAAAC,EAAAC,cAACgC,EAAD,cAPUF,cCMZG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACf+C,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,oBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,oBAAN,sBAEP5B,GAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBmC","file":"static/js/main.e2ed20d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as classNames from 'classnames';\nimport moment from 'moment';\nimport './Calculator.css';\n\nclass Calculator extends Component {\n  render() {\n    const {\n      answer,\n    } = this.state;\n\n    return (\n      <form className=\"calculator\">\n        <div>\n          <label className=\"delayLabel\" htmlFor=\"delay\">Delay:</label>\n          <input\n              autoFocus\n              tabIndex={1}\n              type=\"text\"\n              onChange={this.handleChange.bind(this, 'delay')}\n              className=\"delayLabel\"\n              id=\"delay\"\n              placeholder=\"minutes\"\n          />\n        </div>\n        <div>\n          <button\n              id=\"submit\"\n              tabIndex={2}\n              type=\"submit\"\n              onClick={this.submit.bind(this)}\n              className={classNames(\"btn\", \"btn-primary\", \"calculate\")}\n          >\n            Calculate\n          </button>\n        </div>\n        {answer && <div className=\"answer\">{answer}</div>}\n      </form>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      delay: \"0\",\n      answer: undefined,\n    };\n  }\n\n  handleChange(propName, event: React.FormEvent<HTMLInputElement>) {\n    const input = event.target;\n\n    this.setState({\n      ...this.state,\n      [propName]: input.value\n    });\n  }\n\n  submit(e) {\n    e.preventDefault();\n\n    const minutesToAdd = parseInt(this.state.delay);\n    const calculatedTime = moment().add(minutesToAdd, 'minutes').format(\"h:mm a\");\n\n    this.setState({\n      ...this.state,\n      answer: calculatedTime,\n    });\n  }\n}\n\nexport default Calculator;\n\n/* vim: set ts=2 sw=2 sta sts=2 sr et ai: */\n","import React, { Component } from 'react';\nimport Calculator from './Calculator.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Timer Calculator</h1>\n        </header>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}